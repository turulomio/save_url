#!/usr/bin/python3
from argparse import ArgumentParser, RawTextHelpFormatter
from re import search
from subprocess import run, PIPE
from datetime import date,datetime
from colorama import Fore, Style
from math import floor, pow, log
from mechanize import Browser

__version__="0.6.0"
__versiondate__=date(2022, 11, 11)

def dtnaive2string(dt, type=1):
    if dt==None:
        resultado="None"
    elif type==1:
            resultado="{}{}{} {}{}".format(dt.year, str(dt.month).zfill(2), str(dt.day).zfill(2), str(dt.hour).zfill(2), str(dt.minute).zfill(2))
    return resultado


def humanizeFileSize(filesize):
    p = int(floor(log(filesize, 2)/10))
    return "%.2f %s" % (filesize/pow(1024,p), ['B','KB','MB','GB','TB','PB','EB','ZB','YB'][p])

def input_string(text):
    while True:
        res=input(Style.BRIGHT+text+": ")
        try:
            if res==None or res=="":
                continue
            res=str(res)
            return res
        except:
            pass

def getTitle(url):
    try:
        br = Browser()
        br.open(url)
        title=br.title()
        title=title.replace("\n","")
        title=title.replace("/","_")
        title=title.strip()
    except:
        title=None
    return title

parser=ArgumentParser(
        prog='save_url', 
        description="Script to save and url in a single file with an automatic and structured name. It uses monolith as its backend.",
        epilog="If you like this app, please give me a star in https://github.com/turulomio/save_url."+ "\n" + "Developed by Mariano Mu√±oz 2019-{} \xa9".format( __versiondate__.year),
        formatter_class=RawTextHelpFormatter
        )
parser.add_argument('--version', action='version', version="{} ({})".format(__version__, __versiondate__))
parser.add_argument('url', help="Url to save")
parser.add_argument('--notime', help="Removes date and time from the beginning of the file name", action="store_true", default=False)
args=parser.parse_args()

result=run(["monolith", args.url], shell=False, stdout=PIPE)
title=getTitle(args.url)
if title is None:
    title=input_string("I couldn't extract web page title. Please write it")
content=result.stdout.decode("UTF-8")
if args.notime:
    filename="{}.html".format(title[:114])
else:
    filename="{} {}.html".format(dtnaive2string(datetime.now()), title[:100])

with open(filename,"w") as f:
    f.write(content)

if len(content)==0 or result.returncode!=0:
    print(Fore.RED + Style.BRIGHT + "Something is wrong with saved file. Please Checkit" + Style.RESET_ALL)
else:
    print (Style.BRIGHT + "File '{}' ({}) saved correctly.".format(Fore.GREEN + filename + Fore.RESET, Fore.YELLOW + humanizeFileSize(len(content)) + Fore.RESET ) + Style.RESET_ALL)
